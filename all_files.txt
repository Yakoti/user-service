===== ./src/main/java/com/ridetogether/user_service/config/RequestLoggingFilter.java =====
package com.ridetogether.user_service.config;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import java.io.IOException;

@Component
public class RequestLoggingFilter extends OncePerRequestFilter {


    @Override
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        System.out.println("Request received: \nMethod: "+ request.getMethod() + "\nURI: " + request.getRequestURI());
        filterChain.doFilter(request, response);
    }
}



===== ./src/main/java/com/ridetogether/user_service/config/SecurityConfig.java =====
package com.ridetogether.user_service.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.CorsConfigurationSource;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;

import java.util.List;

//TODO: change permit alls for production
//TODO: check the cors?
@Configuration
public class SecurityConfig {

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

}



===== ./src/main/java/com/ridetogether/user_service/controller/AuthController.java =====
package com.ridetogether.user_service.controller;


import com.ridetogether.user_service.model.LoginRequest;
import com.ridetogether.user_service.model.RegisterRequest;
import com.ridetogether.user_service.model.User;
import com.ridetogether.user_service.repository.UserRepository;
import com.ridetogether.user_service.service.AuthService;
import com.ridetogether.user_service.service.JwtService;
import com.ridetogether.user_service.service.UserService;
import jakarta.validation.Valid;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.validation.BindingResult;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.annotation.*;

import java.util.List;

//TODO: logout controller maybe not needed?


@RestController
@RequestMapping("/auth")
public class AuthController {

    private final Logger logger = LoggerFactory.getLogger(AuthController.class);

    private final AuthService authService;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;

    public AuthController(AuthService authService,
                          PasswordEncoder passwordEncoder,
                          JwtService jwtService) {
        this.authService = authService;
        this.passwordEncoder = passwordEncoder;
        this.jwtService = jwtService;
    }

    @PostMapping("/register")
    public ResponseEntity<?> register(@Valid @RequestBody RegisterRequest request, BindingResult result) {
        //map validation errors to a simple error response
        if (result.hasErrors()) {
            List<String> errors = result.getFieldErrors().stream()
                    .map(e -> e.getField() + ": " + e.getDefaultMessage())
                    .toList();
            return ResponseEntity.badRequest().body(errors);
        }

        try {
            String token = authService.register(request);
            return ResponseEntity.ok(token);
        } catch (IllegalArgumentException e) {
            return ResponseEntity.badRequest().body(e.getMessage());
        }
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        try{
            String token = authService.login(request);
            return ResponseEntity.ok(token);
        }catch(IllegalArgumentException e){
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(e.getMessage());
        }
    }

    @GetMapping("/test")
    public String testAuth(){
        return "hey acces to auth/ endpoints works";
    }

//    @GetMapping("/login")
//    public ResponseEntity<?> loginBrowser(
//            @RequestParam String email,
//            @RequestParam String password) {
//        var userOpt = userService.findByEmail(email);
//        if (userOpt.isEmpty()) {
//            System.out.println("User not found for email: " + email);
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
//        }
//
//        User user = userOpt.get();
//        boolean matches = passwordEncoder.matches(password, user.getPassword());
//        System.out.println("Password matches: " + matches);
//        if (!matches) {
//            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
//        }
//        String token = jwtService.generateToken(user);
//        return ResponseEntity.ok(token);
//    }


}



===== ./src/main/java/com/ridetogether/user_service/controller/DriverController.java =====
package com.ridetogether.user_service.controller;

import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.service.DriverService;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/users/drivers")
public class DriverController {
    @Autowired
    private DriverService driverService;

    @GetMapping("/{id}")
    public ResponseEntity<DriverDto> getDriverById(@PathVariable long id){
        Optional<DriverDto> driverDto = driverService.findById(id);
        if (driverDto.isEmpty()) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(driverDto.get());
    }

    @GetMapping
    public List<DriverDto> getAllDrivers() {
        return driverService.findAllDrivers();
    }

    @GetMapping("/{id}/matching-drivers")
    public List<PassengerDto> findMatchingPassengers(@PathVariable Long id){
            return driverService.findMatchingPassengers(id);
    }

//    @PostMapping
//    public ResponseEntity<DriverDto> createDriver(@RequestBody DriverDto driverDto) {
//        System.out.println(driverDto);
//        return  ResponseEntity.ok(driverService.createDriver(driverDto));
//    }
//
//    @PutMapping("/{id}")
//    public ResponseEntity<DriverDto> updateDriver(@PathVariable Long id, @RequestBody DriverDto driverDto) {
//        driverService.updatedriverDto(driverDto);
//        return ResponseEntity.ok(driverService.updatedriverDto(driverDto));
//    }
//
//    @DeleteMapping("/{id}")
//    public ResponseEntity<Void> deleteDriver(@RequestBody DriverDto driverDto) {
//        driverDtoService.deleteDriver(driverDto);
//        return ResponseEntity.noContent().build();
//    }
}



===== ./src/main/java/com/ridetogether/user_service/controller/PassengerController.java =====
package com.ridetogether.user_service.controller;

import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.service.PassengerService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/users/passengers")
public class PassengerController {
    @Autowired
    private PassengerService passengerService;

    @GetMapping("/{id}")
    public ResponseEntity<PassengerDto> getPassengerById(@PathVariable long id){
        Optional<PassengerDto> driverDto = passengerService.findById(id);
        if (driverDto.isEmpty()) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(driverDto.get());
    }

    @GetMapping
    public List<PassengerDto> getAllPassengers() {
        return passengerService.findAllPassengers();
    }

    @GetMapping("/{id}/matching-drivers")
    public List<DriverDto> findMatchingDrivers(@PathVariable Long id){
        return passengerService.findMatchingDrivers(id);
    }

//    @PostMapping
//    public ResponseEntity<PassengerDto> createPassenger(@RequestBody PassengerDto driverDto) {
//        System.out.println(driverDto);
//        return  ResponseEntity.ok(driverService.createPassenger(driverDto));
//    }

//

//
//    @DeleteMapping("/{id}")
//    public ResponseEntity<Void> deletePassenger(@RequestBody PassengerDto driverDto) {
//        driverDtoService.deletePassenger(driverDto);
//        return ResponseEntity.noContent().build();
//    }

}



===== ./src/main/java/com/ridetogether/user_service/controller/UserController.java =====
package com.ridetogether.user_service.controller;

import com.ridetogether.user_service.model.User;
import com.ridetogether.user_service.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.Optional;

@RestController
@RequestMapping("/users")
public class UserController {
    @Autowired
    private UserService userService;

    @GetMapping("/{id}")
    public ResponseEntity<User> getUserById(@PathVariable long id) throws InterruptedException {
        Optional<User> user = userService.findById(id);
        if (user.isEmpty()) return ResponseEntity.notFound().build();
        return ResponseEntity.ok(user.get());
    }

    @GetMapping
    public List<User> getAllUsers() {
        return userService.findAll();
    }

    @PostMapping
    public ResponseEntity<User> createUser(@RequestBody User user) {
        System.out.println(user);
        return  ResponseEntity.ok(userService.createUser(user));
    }

    @PutMapping("/{id}")
    public ResponseEntity<User> updateUser(@PathVariable Long id, @RequestBody User user) {
        userService.updateUser(user);
        return ResponseEntity.ok(userService.updateUser(user));
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Void> deleteUser(@RequestBody User user) {
        userService.deleteUser(user);
        return ResponseEntity.noContent().build();
    }
}


===== ./src/main/java/com/ridetogether/user_service/dto/DriverDto.java =====
package com.ridetogether.user_service.dto;

import com.ridetogether.user_service.model.UserRole;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalTime;

@Getter
@Setter
public class DriverDto {
    private Long id;
    private String name;
    private String email;
    private String phone;
    private String homeAddress;
    private String officeAddress;
    private LocalTime preferredArrivalStart;
    private LocalTime preferredArrivalEnd;
    private int flexibilityMinutes;
    private double flexibilityKm;
    private UserRole role;

    private int availableSeats;
    private double costPer100KmEUR;
}



===== ./src/main/java/com/ridetogether/user_service/dto/PassengerDto.java =====
package com.ridetogether.user_service.dto;

import com.ridetogether.user_service.model.UserRole;
import jakarta.persistence.EnumType;
import jakarta.persistence.Enumerated;
import lombok.Getter;
import lombok.Setter;

import java.time.LocalTime;

@Getter
@Setter
public class PassengerDto {
    private Long id;
    private String name;
    private String email;
    private String phone;
    private String homeAddress;
    private String officeAddress;
    private LocalTime preferredArrivalStart;
    private LocalTime preferredArrivalEnd;
    private int flexibilityMinutes;
    private double flexibilityKm;
    private UserRole role;
}



===== ./src/main/java/com/ridetogether/user_service/mapper/DriverDtoMapper.java =====
package com.ridetogether.user_service.mapper;

import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.model.User;

import static com.ridetogether.user_service.model.UserRole.DRIVER;

public class DriverDtoMapper {

    public static DriverDto toDto(User user) {
        if (user == null) return null;
        if (user.getRole() != DRIVER)
            throw new IllegalArgumentException("You are trying to map user that is passenger to driver");

        DriverDto dto = new DriverDto();
        dto.setId(user.getId());
        dto.setName(user.getName());
        dto.setEmail(user.getEmail());
        dto.setPhone(user.getPhone());
        dto.setHomeAddress(user.getHomeAddress());
        dto.setOfficeAddress(user.getOfficeAddress());
        dto.setPreferredArrivalStart(user.getPreferredArrivalStart());
        dto.setPreferredArrivalEnd(user.getPreferredArrivalEnd());
        dto.setFlexibilityMinutes(user.getFlexibilityMinutes());
        dto.setFlexibilityKm(user.getFlexibilityKm());
        dto.setRole(user.getRole());
        dto.setAvailableSeats(user.getAvailableSeats());
        dto.setCostPer100KmEUR(user.getCostPer100KmEUR());
        return dto;
    }
}


===== ./src/main/java/com/ridetogether/user_service/mapper/PassengerDtoMapper.java =====
package com.ridetogether.user_service.mapper;

import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.model.User;

import java.util.InputMismatchException;

import static com.ridetogether.user_service.model.UserRole.PASSENGER;


public class PassengerDtoMapper {

    public static PassengerDto toDto(User user) throws IllegalArgumentException{
        if (user == null) return null;
        if (user.getRole() != PASSENGER) throw new IllegalArgumentException("You are trying to map user that is driver to passenger");

        PassengerDto dto = new PassengerDto();
        dto.setId(user.getId());
        dto.setName(user.getName());
        dto.setEmail(user.getEmail());
        dto.setPhone(user.getPhone());
        dto.setHomeAddress(user.getHomeAddress());
        dto.setOfficeAddress(user.getOfficeAddress());
        dto.setPreferredArrivalStart(user.getPreferredArrivalStart());
        dto.setPreferredArrivalEnd(user.getPreferredArrivalEnd());
        dto.setFlexibilityMinutes(user.getFlexibilityMinutes());
        dto.setFlexibilityKm(user.getFlexibilityKm());
        dto.setRole(user.getRole());
        return dto;
    }
}


===== ./src/main/java/com/ridetogether/user_service/mapper/RegistrationRequestMapper.java =====
package com.ridetogether.user_service.mapper;

import com.ridetogether.user_service.model.RegisterRequest;
import com.ridetogether.user_service.model.User;

public class RegistrationRequestMapper {
    public static User toUser(RegisterRequest req) {
        User user = new User();

        user.setName(req.getName());
        user.setEmail(req.getEmail());
        //password is encoded in the service layer
        user.setPassword(req.getPassword());
        user.setPhone(req.getPhone());
        user.setHomeAddress(req.getHomeAddress());
        user.setOfficeAddress(req.getOfficeAddress());
        user.setPreferredArrivalStart(req.getPreferredArrivalStart());
        user.setPreferredArrivalEnd(req.getPreferredArrivalEnd());
        user.setFlexibilityMinutes(req.getFlexibilityMinutes());
        user.setFlexibilityKm(req.getFlexibilityKm());
        user.setRole(req.getRole());

        return user;
    }
}



===== ./src/main/java/com/ridetogether/user_service/model/LoginRequest.java =====
package com.ridetogether.user_service.model;

import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
public class LoginRequest {
    private String email;
    private String password;
}



===== ./src/main/java/com/ridetogether/user_service/model/RegisterRequest.java =====
package com.ridetogether.user_service.model;

import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import java.time.LocalTime;

//TODO: ADD validation for the addresses so they form valid urls!

@Data
@AllArgsConstructor
@NoArgsConstructor
public class RegisterRequest {

    @NotBlank
    private String name;

    @Email(message = "Invalid email adress")
    @NotBlank
    private String email;

    @Pattern(regexp = "^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[@#$%^&+=!]).{8,}$",
            message = "Password must have at least 8 chars, one uppercase, one lowercase, one digit, and one special char")
    private String password;

    @Pattern(regexp = "\\+?[0-9]{10,15}", message = "Invalid phone number")
    private String phone;

    private String homeAddress;
    private String officeAddress;

    private LocalTime preferredArrivalStart;
    private LocalTime preferredArrivalEnd;

    @Min(0)
    private int flexibilityMinutes;

    @DecimalMin("0.0")
    private double flexibilityKm;

    @NotNull
    private UserRole role;

    private int availableSeats;

    private double costPer100KmEUR;
}



===== ./src/main/java/com/ridetogether/user_service/model/User.java =====
package com.ridetogether.user_service.model;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalTime;

//TODO: add password, contact info, and so on

@Entity
@Table(name = "users")
@Data
@NoArgsConstructor
@AllArgsConstructor
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;
    private String password;
    private String phone;
    private String homeAddress;
    private String officeAddress;
    private LocalTime preferredArrivalStart;
    private LocalTime preferredArrivalEnd;
    private int flexibilityMinutes;
    private double flexibilityKm;

    @Enumerated(EnumType.STRING)
    private UserRole role;

    private int availableSeats;
    private double costPer100KmEUR;

}



===== ./src/main/java/com/ridetogether/user_service/model/UserRole.java =====
package com.ridetogether.user_service.model;

public enum UserRole {
    DRIVER,
    PASSENGER
}



===== ./src/main/java/com/ridetogether/user_service/repository/UserRepository.java =====
package com.ridetogether.user_service.repository;

import com.ridetogether.user_service.model.User;
import com.ridetogether.user_service.model.UserRole;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.time.LocalTime;
import java.util.List;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    List<User> findByRole(UserRole role);

    @Query("SELECT u FROM User u WHERE u.role = :role AND " +
            "((u.preferredArrivalStart <= :endTime AND u.preferredArrivalEnd >= :startTime))")
    List<User> findByRoleAndArrivalWindow(@Param("role") UserRole role,
                                        @Param("startTime") LocalTime startTime,
                                        @Param("endTime") LocalTime endTime);


    Optional<User> findByEmail(String email);
}



===== ./src/main/java/com/ridetogether/user_service/service/AuthService.java =====
package com.ridetogether.user_service.service;

import com.ridetogether.user_service.mapper.RegistrationRequestMapper;
import com.ridetogether.user_service.model.LoginRequest;
import com.ridetogether.user_service.model.RegisterRequest;
import com.ridetogether.user_service.model.User;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class AuthService {
    private final UserService userService;
    private final PasswordEncoder passwordEncoder;
    private final JwtService jwtService;

    public AuthService(UserService userService, PasswordEncoder passwordEncoder, JwtService jwtService) {
        this.userService = userService;
        this.passwordEncoder = passwordEncoder;
        this.jwtService = jwtService;
    }

    public String register(RegisterRequest request) {
        if (userService.findByEmail(request.getEmail()).isPresent()) throw new IllegalArgumentException("EMAIL_INVALID: Account with this email already exists");

        User user = RegistrationRequestMapper.toUser(request);
        user.setPassword(passwordEncoder.encode(request.getPassword()));
        user = userService.createUser(user);

        return jwtService.generateToken(user);
    }

    public String login(LoginRequest request){
        User user = userService.findByEmail(request.getEmail())
                .orElseThrow(() -> new IllegalArgumentException("Invalid credentials no such user"));

        if (!passwordEncoder.matches(request.getPassword(), user.getPassword()))
            throw new IllegalArgumentException("Invalid credentials wrong pass");

        return jwtService.generateToken(user);
    }
}



===== ./src/main/java/com/ridetogether/user_service/service/DriverService.java =====
package com.ridetogether.user_service.service;

import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.mapper.DriverDtoMapper;
import com.ridetogether.user_service.mapper.PassengerDtoMapper;
import com.ridetogether.user_service.repository.UserRepository;
import com.ridetogether.user_service.model.User;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

import static com.ridetogether.user_service.model.UserRole.DRIVER;
import static com.ridetogether.user_service.model.UserRole.PASSENGER;

@Service
public class DriverService {
    private final UserRepository userRepository;

    public DriverService(
            UserRepository userRepository
    ) {
        this.userRepository = userRepository;
    }

    public Optional<DriverDto> findById(long id) {
        Optional<User> userOpt = userRepository.findById(id);
        Optional<DriverDto> dtoOpt = userOpt.map(DriverDtoMapper::toDto);
        return dtoOpt;
    }

    public Optional<DriverDto> findByEmail(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        Optional<DriverDto> dtoOpt = userOpt.map(DriverDtoMapper::toDto);
        return dtoOpt;
    }

    public List<DriverDto> findAllDrivers() {
        return userRepository.findByRole(DRIVER).stream().map(DriverDtoMapper::toDto).toList();
    }

    public List<PassengerDto> findMatchingPassengers(Long driverId) {
        Optional<User> userOpt = userRepository.findById(driverId);
        if(userOpt.isEmpty()) throw new EntityNotFoundException("There is no driver with id: " + driverId);
        User passenger = userOpt.get();

        return userRepository.findByRoleAndArrivalWindow(PASSENGER,passenger.getPreferredArrivalStart(),
                        passenger.getPreferredArrivalEnd())
                .stream().map(PassengerDtoMapper::toDto).toList();
    }

    //find matching....

// THIS SHOULD BE ONLY possible IN REGISTER
//    public DriverDto createDriverDto(DriverDto driver) {
//        return userRepository.save(driver).map(DriverDtoMapper::toDto);
//    }

    //this should be universal method in userservice that takes driverdto or passenger dto parse and change the info
//    public DriverDto updateDriverDto(DriverDto driver) {
//        return userRepository.save(driver);
//    }

//    //idk if we should even have this method...
//    public void deleteDriverDto(DriverDto driver) {
//        userRepository.deleteById(driver.getId());
//    }

}



===== ./src/main/java/com/ridetogether/user_service/service/JwtKeyGen.java =====
package com.ridetogether.user_service.service;

import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;

import javax.crypto.SecretKey;
import java.util.Base64;

public class JwtKeyGen {
    public static void main(String[] args) {
        SecretKey key = Keys.secretKeyFor(SignatureAlgorithm.HS256);
        String base64Key = Base64.getEncoder().encodeToString(key.getEncoded());
        System.out.println(base64Key);

    }
}



===== ./src/main/java/com/ridetogether/user_service/service/JwtService.java =====
package com.ridetogether.user_service.service;

import com.ridetogether.user_service.model.User;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.security.Keys;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

import java.security.Key;
import java.util.Date;

@Service
public class JwtService {

    @Value("${jwt.secret}")
    private String jwtSecret; // use the same secret across services

    public String generateToken(User user) {
        return Jwts.builder()
                .setIssuer("RideTogetherApp")
                .setSubject(user.getEmail())
                .claim("id", String.valueOf(user.getId()))
                .claim("role", user.getRole().name())
                .setIssuedAt(new Date())
                .setExpiration(new Date(System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 7))
                .signWith(Keys.hmacShaKeyFor(jwtSecret.getBytes()))
                .compact();
    }

    public String extractEmail(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(Keys.hmacShaKeyFor(jwtSecret.getBytes()))
                .build()
                .parseClaimsJws(token)
                .getBody()
                .getSubject();
    }

    public String extractId(String token) {
        return Jwts.parserBuilder()
                .setSigningKey(Keys.hmacShaKeyFor(jwtSecret.getBytes()))
                .build()
                .parseClaimsJws(token)
                .getBody()
                .get("id", String.class);
    }
}



===== ./src/main/java/com/ridetogether/user_service/service/PassengerService.java =====
package com.ridetogether.user_service.service;

import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.mapper.DriverDtoMapper;
import com.ridetogether.user_service.mapper.PassengerDtoMapper;
import com.ridetogether.user_service.model.User;
import com.ridetogether.user_service.repository.UserRepository;
import jakarta.persistence.EntityNotFoundException;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

import static com.ridetogether.user_service.model.UserRole.DRIVER;
import static com.ridetogether.user_service.model.UserRole.PASSENGER;

@Service
public class PassengerService {
    private final UserRepository userRepository;

    public PassengerService(
            UserRepository userRepository
    ) {
        this.userRepository = userRepository;
    }

    public Optional<PassengerDto> findById(long id) {
        Optional<User> userOpt = userRepository.findById(id);
        Optional<PassengerDto> dtoOpt = userOpt.map(PassengerDtoMapper::toDto);
        return dtoOpt;
    }

    public Optional<PassengerDto> findByEmail(String email) {
        Optional<User> userOpt = userRepository.findByEmail(email);
        Optional<PassengerDto> dtoOpt = userOpt.map(PassengerDtoMapper::toDto);
        return dtoOpt;
    }

    public List<PassengerDto> findAllPassengers() {
        return userRepository.findByRole(PASSENGER).stream().map(PassengerDtoMapper::toDto).toList();
    }

    public List<DriverDto> findMatchingDrivers(Long passengerId) {
        Optional<User> userOpt = userRepository.findById(passengerId);
        if(userOpt.isEmpty()) throw new EntityNotFoundException("There is no passenger with id: " + passengerId);
        User passenger = userOpt.get();

        return userRepository.findByRoleAndArrivalWindow(DRIVER,passenger.getPreferredArrivalStart(),
                        passenger.getPreferredArrivalEnd())
                .stream().map(DriverDtoMapper::toDto).toList();
    }
}



===== ./src/main/java/com/ridetogether/user_service/service/UserService.java =====
package com.ridetogether.user_service.service;


import com.ridetogether.user_service.model.*;
import com.ridetogether.user_service.repository.UserRepository;
import org.springframework.stereotype.Service;
import java.util.List;
import java.util.Optional;

@Service
public class UserService {
    private final UserRepository userRepository;

    public UserService(
            UserRepository userRepository
    ) {
        this.userRepository = userRepository;
    }

    public Optional<User> findById(long id) {
        return userRepository.findById(id);
    }

    public Optional<User> findByEmail(String email){
        return userRepository.findByEmail(email);
    }

    public List<User> findAll() {
        return userRepository.findAll();
    }

    public User createUser(User user) {
        return userRepository.save(user);
    }

    public User updateUser(User user) {
        return userRepository.save(user);
    }

    public void deleteUser(User user) {
        userRepository.delete(user);
    }}


===== ./src/main/java/com/ridetogether/user_service/UserServiceApplication.java =====
package com.ridetogether.user_service;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class UserServiceApplication {

	public static void main(String[] args) {
		SpringApplication.run(UserServiceApplication.class, args);
	}

}



===== ./src/main/resources/application.properties =====
spring.application.name=user-service
server.port=8081
jwt.secret=JuuWgqPZb7DCL3Nk5I4LDjyFMgWJ1BnUEjly+zdYd+4=

#Swagger -> http://localhost:8081/swagger-ui/index.html

#eureka
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

#h2
spring.datasource.url=jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console
spring.jpa.database-platform=org.hibernate.dialect.H2Dialect

spring.jpa.hibernate.ddl-auto=create-drop

# Show SQL statements
spring.jpa.show-sql=true

# Format SQL nicely
spring.jpa.properties.hibernate.format_sql=true

# Optional: show SQL with parameter values (requires Hibernate 5.2+)
logging.level.org.hibernate.type.descriptor.sql=TRACE



===== ./src/main/resources/import.sql =====



===== ./src/test/java/com/ridetogether/user_service/controller/AuthControllerTest.java =====
package com.ridetogether.user_service.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ridetogether.user_service.model.LoginRequest;
import com.ridetogether.user_service.model.RegisterRequest;
import com.ridetogether.user_service.model.UserRole;
import com.ridetogether.user_service.service.AuthService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import static org.mockito.ArgumentMatchers.any;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = AuthController.class)
class AuthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private AuthService authService;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @DisplayName("POST /auth/register - returns 200 with token when registration succeeds")
    void register_success_returnsToken() throws Exception {
        RegisterRequest req = new RegisterRequest();
        req.setName("Alice");
        req.setEmail("alice@example.com");
        req.setPassword("StrongP@ssw0rd");
        req.setPhone("+12345678901");
        req.setRole(UserRole.PASSENGER);

        Mockito.when(authService.register(any(RegisterRequest.class))).thenReturn("jwt-token");

        mockMvc.perform(post("/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(content().string("jwt-token"));
    }

    @Test
    @DisplayName("POST /auth/register - returns 400 with validation messages on invalid input")
    void register_validationErrors_returnsBadRequest() throws Exception {
        RegisterRequest req = new RegisterRequest();
        // Missing name, invalid email, weak password, invalid phone, null role
        req.setEmail("bad-email");
        req.setPassword("weak");
        req.setPhone("123");

        mockMvc.perform(post("/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isBadRequest())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[?(@ =~ /.*name.*/)]").exists());
    }

    @Test
    @DisplayName("POST /auth/register - returns 400 when service throws IllegalArgumentException")
    void register_conflict_returnsBadRequest() throws Exception {
        RegisterRequest req = new RegisterRequest();
        req.setName("Alice");
        req.setEmail("alice@example.com");
        req.setPassword("StrongP@ssw0rd");
        req.setPhone("+12345678901");
        req.setRole(UserRole.DRIVER);

        Mockito.when(authService.register(any(RegisterRequest.class)))
                .thenThrow(new IllegalArgumentException("Email already in use"));

        mockMvc.perform(post("/auth/register")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isBadRequest())
                .andExpect(content().string("Email already in use"));
    }

    @Test
    @DisplayName("POST /auth/login - returns 200 with token when credentials valid")
    void login_success_returnsToken() throws Exception {
        LoginRequest req = new LoginRequest("alice@example.com", "StrongP@ssw0rd");
        Mockito.when(authService.login(any(LoginRequest.class))).thenReturn("jwt-token");

        mockMvc.perform(post("/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isOk())
                .andExpect(content().string("jwt-token"));
    }

    @Test
    @DisplayName("POST /auth/login - returns 401 when service rejects credentials")
    void login_invalidCredentials_returnsUnauthorized() throws Exception {
        LoginRequest req = new LoginRequest("alice@example.com", "wrong");
        Mockito.when(authService.login(any(LoginRequest.class)))
                .thenThrow(new IllegalArgumentException("Invalid credentials"));

        mockMvc.perform(post("/auth/login")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(req)))
                .andExpect(status().isUnauthorized())
                .andExpect(content().string("Invalid credentials"));
    }

    @Test
    @DisplayName("GET /auth/test - returns a simple success string")
    void test_returnsOkString() throws Exception {
        mockMvc.perform(get("/auth/test").header(HttpHeaders.AUTHORIZATION, "Bearer some.jwt.token"))
                .andExpect(status().isOk())
                .andExpect(content().string("hey acces to auth/ endpoints works"));
    }
}





===== ./src/test/java/com/ridetogether/user_service/controller/DriverControllerTest.java =====
package com.ridetogether.user_service.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.service.DriverService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = DriverController.class)
class DriverControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private DriverService driverService;

    @Autowired
    private ObjectMapper objectMapper;

    private DriverDto driver(Long id) {
        DriverDto d = new DriverDto();
        d.setId(id);
        d.setName("Driver " + id);
        d.setEmail("driver" + id + "@example.com");
        return d;
    }

    private PassengerDto passenger(Long id) {
        PassengerDto p = new PassengerDto();
        p.setId(id);
        p.setName("Passenger " + id);
        p.setEmail("passenger" + id + "@example.com");
        return p;
    }

    @Test
    @DisplayName("GET /users/drivers/{id} - returns 200 with driver when found")
    void getDriverById_found_returnsOk() throws Exception {
        Mockito.when(driverService.findById(1L)).thenReturn(Optional.of(driver(1L)));

        mockMvc.perform(get("/users/drivers/1"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.email").value("driver1@example.com"));
    }

    @Test
    @DisplayName("GET /users/drivers/{id} - returns 404 when not found")
    void getDriverById_notFound_returns404() throws Exception {
        Mockito.when(driverService.findById(404L)).thenReturn(Optional.empty());

        mockMvc.perform(get("/users/drivers/404"))
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("GET /users/drivers - returns list of drivers")
    void getAllDrivers_returnsList() throws Exception {
        List<DriverDto> drivers = Arrays.asList(driver(1L), driver(2L));
        Mockito.when(driverService.findAllDrivers()).thenReturn(drivers);

        mockMvc.perform(get("/users/drivers"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[1].id").value(2L));
    }

    @Test
    @DisplayName("GET /users/drivers/{id}/matching-drivers - returns matching passengers")
    void getMatchingPassengers_returnsList() throws Exception {
        List<PassengerDto> passengers = Arrays.asList(passenger(10L), passenger(20L));
        Mockito.when(driverService.findMatchingPassengers(5L)).thenReturn(passengers);

        mockMvc.perform(get("/users/drivers/5/matching-drivers"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value(10L))
                .andExpect(jsonPath("$[1].id").value(20L));
    }

    @Test
    @DisplayName("GET /users/drivers/{id}/matching-drivers - returns 404 when driver not found")
    void getMatchingPassengers_driverNotFound_returns404() throws Exception {
        Mockito.when(driverService.findMatchingPassengers(anyLong()))
                .thenThrow(new jakarta.persistence.EntityNotFoundException("There is no driver with id: 99"));

        mockMvc.perform(get("/users/drivers/99/matching-drivers"))
                .andExpect(status().isNotFound());
    }
}





===== ./src/test/java/com/ridetogether/user_service/controller/PassengerControllerTest.java =====
package com.ridetogether.user_service.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ridetogether.user_service.dto.DriverDto;
import com.ridetogether.user_service.dto.PassengerDto;
import com.ridetogether.user_service.service.PassengerService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.anyLong;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = PassengerController.class)
class PassengerControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PassengerService passengerService;

    @Autowired
    private ObjectMapper objectMapper;

    private PassengerDto passenger(Long id) {
        PassengerDto p = new PassengerDto();
        p.setId(id);
        p.setName("Passenger " + id);
        p.setEmail("passenger" + id + "@example.com");
        return p;
    }

    private DriverDto driver(Long id) {
        DriverDto d = new DriverDto();
        d.setId(id);
        d.setName("Driver " + id);
        d.setEmail("driver" + id + "@example.com");
        return d;
    }

    @Test
    @DisplayName("GET /users/passengers/{id} - returns 200 with passenger when found")
    void getPassengerById_found_returnsOk() throws Exception {
        Mockito.when(passengerService.findById(1L)).thenReturn(Optional.of(passenger(1L)));

        mockMvc.perform(get("/users/passengers/1"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.email").value("passenger1@example.com"));
    }

    @Test
    @DisplayName("GET /users/passengers/{id} - returns 404 when not found")
    void getPassengerById_notFound_returns404() throws Exception {
        Mockito.when(passengerService.findById(404L)).thenReturn(Optional.empty());

        mockMvc.perform(get("/users/passengers/404"))
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("GET /users/passengers - returns list of passengers")
    void getAllPassengers_returnsList() throws Exception {
        List<PassengerDto> passengers = Arrays.asList(passenger(1L), passenger(2L));
        Mockito.when(passengerService.findAllPassengers()).thenReturn(passengers);

        mockMvc.perform(get("/users/passengers"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[1].id").value(2L));
    }

    @Test
    @DisplayName("GET /users/passengers/{id}/matching-drivers - returns matching drivers")
    void getMatchingDrivers_returnsList() throws Exception {
        List<DriverDto> drivers = Arrays.asList(driver(10L), driver(20L));
        Mockito.when(passengerService.findMatchingDrivers(5L)).thenReturn(drivers);

        mockMvc.perform(get("/users/passengers/5/matching-drivers"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value(10L))
                .andExpect(jsonPath("$[1].id").value(20L));
    }

    @Test
    @DisplayName("GET /users/passengers/{id}/matching-drivers - returns 404 when passenger not found")
    void getMatchingDrivers_passengerNotFound_returns404() throws Exception {
        Mockito.when(passengerService.findMatchingDrivers(anyLong()))
                .thenThrow(new jakarta.persistence.EntityNotFoundException("There is no passenger with id: 99"));

        mockMvc.perform(get("/users/passengers/99/matching-drivers"))
                .andExpect(status().isNotFound());
    }
}





===== ./src/test/java/com/ridetogether/user_service/controller/UserControllerTest.java =====
package com.ridetogether.user_service.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.ridetogether.user_service.model.User;
import com.ridetogether.user_service.model.UserRole;
import com.ridetogether.user_service.service.UserService;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.eq;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(controllers = UserController.class)
class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private UserService userService;

    @Autowired
    private ObjectMapper objectMapper;

    private User sampleUser(Long id) {
        User u = new User();
        u.setId(id);
        u.setName("John Doe");
        u.setEmail("john@example.com");
        u.setPassword("StrongP@ss1");
        u.setPhone("+12345678901");
        u.setHomeAddress("Home");
        u.setOfficeAddress("Office");
        u.setPreferredArrivalStart(LocalTime.of(8, 0));
        u.setPreferredArrivalEnd(LocalTime.of(9, 0));
        u.setFlexibilityMinutes(10);
        u.setFlexibilityKm(2.5);
        u.setRole(UserRole.PASSENGER);
        u.setAvailableSeats(0);
        u.setCostPer100KmEUR(5.0);
        return u;
    }

    @Test
    @DisplayName("GET /users/{id} - returns 200 with user when found")
    void getUserById_found_returnsOk() throws Exception {
        Mockito.when(userService.findById(1L)).thenReturn(Optional.of(sampleUser(1L)));

        mockMvc.perform(get("/users/1"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$.id").value(1L))
                .andExpect(jsonPath("$.email").value("john@example.com"));
    }

    @Test
    @DisplayName("GET /users/{id} - returns 404 when not found")
    void getUserById_notFound_returns404() throws Exception {
        Mockito.when(userService.findById(404L)).thenReturn(Optional.empty());

        mockMvc.perform(get("/users/404"))
                .andExpect(status().isNotFound());
    }

    @Test
    @DisplayName("GET /users - returns list of users")
    void getAllUsers_returnsList() throws Exception {
        List<User> users = Arrays.asList(sampleUser(1L), sampleUser(2L));
        Mockito.when(userService.findAll()).thenReturn(users);

        mockMvc.perform(get("/users"))
                .andExpect(status().isOk())
                .andExpect(content().contentTypeCompatibleWith(MediaType.APPLICATION_JSON))
                .andExpect(jsonPath("$[0].id").value(1L))
                .andExpect(jsonPath("$[1].id").value(2L));
    }

    @Test
    @DisplayName("POST /users - creates and returns user")
    void createUser_returnsCreated() throws Exception {
        User toCreate = sampleUser(null);
        User created = sampleUser(10L);
        Mockito.when(userService.createUser(any(User.class))).thenReturn(created);

        mockMvc.perform(post("/users")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(toCreate)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.id").value(10L));
    }

    @Test
    @DisplayName("PUT /users/{id} - updates and returns user")
    void updateUser_returnsUpdated() throws Exception {
        User input = sampleUser(5L);
        input.setName("Updated");
        User updated = sampleUser(5L);
        updated.setName("Updated");
        Mockito.when(userService.updateUser(any(User.class))).thenReturn(updated);

        mockMvc.perform(put("/users/5")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(input)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.name").value("Updated"));
    }

    @Test
    @DisplayName("DELETE /users/{id} - deletes user and returns 204")
    void deleteUser_noContent() throws Exception {
        User toDelete = sampleUser(3L);
        Mockito.doNothing().when(userService).deleteUser(any(User.class));

        mockMvc.perform(delete("/users/3")
                        .contentType(MediaType.APPLICATION_JSON)
                        .content(objectMapper.writeValueAsString(toDelete)))
                .andExpect(status().isNoContent());
    }
}





===== ./src/test/java/com/ridetogether/user_service/data.sql =====
INSERT INTO users (
    name, email, password, phone, home_address, office_address,
    preferred_arrival_start, preferred_arrival_end, flexibility_minutes,
    flexibility_km, role, available_seats, cost_per100kmeur
) VALUES
      ('Alice Smith', 'alice.smith@example.com', 'pass123', '555-0101', '123 Maple St', '456 Oak Ave', '08:00:00', '09:00:00', 15, 5.0, 'PASSENGER', 0, 0),
      ('Bob Johnson', 'bob.johnson@example.com', 'pass123', '555-0102', '234 Pine St', '567 Birch Ave', '08:15:00', '09:15:00', 10, 3.5, 'DRIVER', 3, 12.5),
      ('Carol Williams', 'carol.williams@example.com', 'pass123', '555-0103', '345 Elm St', '678 Cedar Ave', '07:45:00', '08:45:00', 20, 6.0, 'PASSENGER', 0, 0),
      ('David Brown', 'david.brown@example.com', 'pass123', '456 Spruce St', '789 Walnut Ave', '08:30:00', '09:30:00', 15, 4.0, 'DRIVER', 2, 15.0),
      ('Eve Davis', 'eve.davis@example.com', 'pass123', '555-0105', '567 Ash St', '890 Chestnut Ave', '08:00:00', '09:00:00', 10, 5.0, 'PASSENGER', 0, 0),
      ('Frank Miller', 'frank.miller@example.com', 'pass123', '555-0106', '678 Willow St', '901 Poplar Ave', '08:15:00', '09:15:00', 20, 3.0, 'DRIVER', 3, 13.0),
      ('Grace Wilson', 'grace.wilson@example.com', 'pass123', '555-0107', '789 Fir St', '101 Maple Ave', '07:45:00', '08:45:00', 15, 4.5, 'PASSENGER', 0, 0),
      ('Henry Moore', 'henry.moore@example.com', 'pass123', '555-0108', '890 Birch St', '202 Oak Ave', '08:30:00', '09:30:00', 10, 6.0, 'DRIVER', 4, 10.5),
      ('Ivy Taylor', 'ivy.taylor@example.com', 'pass123', '555-0109', '901 Cedar St', '303 Pine Ave', '08:00:00', '09:00:00', 15, 5.5, 'PASSENGER', 0, 0),
      ('Jack Anderson', 'jack.anderson@example.com', 'pass123', '555-0110', '101 Walnut St', '404 Elm Ave', '08:15:00', '09:15:00', 20, 3.5, 'DRIVER', 3, 12.0),
      ('Karen Thomas', 'karen.thomas@example.com', 'pass123', '555-0111', '111 Chestnut St', '505 Ash Ave', '07:45:00', '08:45:00', 10, 4.0, 'PASSENGER', 0, 0),
      ('Leo Jackson', 'leo.jackson@example.com', 'pass123', '555-0112', '121 Poplar St', '606 Fir Ave', '08:30:00', '09:30:00', 15, 6.5, 'DRIVER', 4, 11.0),
      ('Mia White', 'mia.white@example.com', 'pass123', '555-0113', '131 Maple St', '707 Willow Ave', '08:00:00', '09:00:00', 10, 5.0, 'PASSENGER', 0, 0),
      ('Nick Harris', 'nick.harris@example.com', 'pass123', '555-0114', '141 Oak St', '808 Birch Ave', '08:15:00', '09:15:00', 20, 4.0, 'DRIVER', 3, 13.5),
      ('Olivia Martin', 'olivia.martin@example.com', 'pass123', '555-0115', '151 Pine St', '909 Cedar Ave', '07:45:00', '08:45:00', 15, 3.5, 'PASSENGER', 0, 0),
      ('Paul Lee', 'paul.lee@example.com', 'pass123', '555-0116', '161 Elm St', '1010 Walnut Ave', '08:30:00', '09:30:00', 10, 5.0, 'DRIVER', 2, 15.0),
      ('Quinn Walker', 'quinn.walker@example.com', 'pass123', '555-0117', '171 Ash St', '1111 Chestnut Ave', '08:00:00', '09:00:00', 15, 4.0, 'PASSENGER', 0, 0),
      ('Rachel Hall', 'rachel.hall@example.com', 'pass123', '555-0118', '181 Fir St', '1212 Poplar Ave', '08:15:00', '09:15:00', 20, 6.0, 'DRIVER', 4, 10.0),
      ('Sam Young', 'sam.young@example.com', 'pass123', '555-0119', '191 Willow St', '1313 Maple Ave', '07:45:00', '08:45:00', 10, 5.0, 'PASSENGER', 0, 0),
      ('Tina King', 'tina.king@example.com', 'pass123', '555-0120', '201 Birch St', '1414 Oak Ave', '08:30:00', '09:30:00', 15, 3.5, 'DRIVER', 3, 12.0),
      ('Uma Scott', 'uma.scott@example.com', 'pass123', '555-0121', '211 Cedar St', '1515 Pine Ave', '08:00:00', '09:00:00', 10, 4.5, 'PASSENGER', 0, 0),
      ('Victor Green', 'victor.green@example.com', 'pass123', '555-0122', '221 Walnut St', '1616 Elm Ave', '08:15:00', '09:15:00', 20, 5.0, 'DRIVER', 4, 11.0),
      ('Wendy Adams', 'wendy.adams@example.com', 'pass123', '555-0123', '231 Chestnut St', '1717 Ash Ave', '07:45:00', '08:45:00', 15, 6.0, 'PASSENGER', 0, 0),
      ('Xander Baker', 'xander.baker@example.com', 'pass123', '555-0124', '241 Poplar St', '1818 Fir Ave', '08:30:00', '09:30:00', 10, 3.0, 'DRIVER', 3, 12.5),
      ('Yara Nelson', 'yara.nelson@example.com', 'pass123', '555-0125', '251 Maple St', '1919 Willow Ave', '08:00:00', '09:00:00', 15, 4.0, 'PASSENGER', 0, 0),
      ('Zack Carter', 'zack.carter@example.com', 'pass123', '555-0126', '261 Oak St', '2020 Birch Ave', '08:15:00', '09:15:00', 20, 5.5, 'DRIVER', 3, 13.5),
      ('Amy Brooks', 'amy.brooks@example.com', 'pass123', '555-0127', '271 Pine St', '2121 Cedar Ave', '07:45:00', '08:45:00', 10, 3.5, 'PASSENGER', 0, 0),
      ('Brian Rogers', 'brian.rogers@example.com', 'pass123', '555-0128', '281 Elm St', '2222 Walnut Ave', '08:30:00', '09:30:00', 15, 6.0, 'DRIVER', 4, 10.0),
      ('Clara Perez', 'clara.perez@example.com', 'pass123', '555-0129', '291 Ash St', '2323 Chestnut Ave', '08:00:00', '09:00:00', 10, 4.5, 'PASSENGER', 0, 0),
      ('Derek Cox', 'derek.cox@example.com', 'pass123', '555-0130', '301 Fir St', '2424 Poplar Ave', '08:15:00', '09:15:00', 20, 5.0, 'DRIVER', 3, 12.0);



===== ./src/test/java/com/ridetogether/user_service/schema.sql =====
CREATE TABLE users (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       available_seats INTEGER NOT NULL,
                       cost_per100kmeur FLOAT(53) NOT NULL,
                       email VARCHAR(255),
                       flexibility_km FLOAT(53) NOT NULL,
                       flexibility_minutes INTEGER NOT NULL,
                       home_address VARCHAR(255),
                       name VARCHAR(255),
                       office_address VARCHAR(255),
                       password VARCHAR(255),
                       phone VARCHAR(255),
                       preferred_arrival_end TIME,
                       preferred_arrival_start TIME,
                       role VARCHAR(20) -- use DRIVER/PASSENGER as string
);



===== ./src/test/java/com/ridetogether/user_service/UserServiceApplicationTests.java =====
package com.ridetogether.user_service;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class UserServiceApplicationTests {

	@Test
	void contextLoads() {
	}

}



